type Article {
  title: String!
  content: String
  published: Boolean
  json: JSON
  number: Int
  date: DateTime
  enum: ENUM_ARTICLE_ENUM
  bool: Boolean
  pic: UploadFile
  mainTag: Tag
  fb_cta: GroupCtaFacebook
  mainIngredient: GroupIngredients
  ingredients: [GroupIngredients]
  pictures(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  linkedTags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  manyTags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input ArticleInput {
  title: String!
  content: String
  published: Boolean
  json: JSON
  number: Int
  date: DateTime
  enum: ENUM_ARTICLE_ENUM
  bool: Boolean
  pic: ID
  pictures: [ID]
  mainTag: ID
  linkedTags: [ID]
  manyTags: [ID]
  fb_cta: GroupctafacebookInput
  mainIngredient: GroupingredientsInput
  ingredients: [GroupingredientsInput]
}

input createArticleInput {
  data: ArticleInput
}

type createArticlePayload {
  article: Article
}

input createRecipeInput {
  data: RecipeInput
}

type createRecipePayload {
  recipe: Recipe
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTagInput {
  data: TagInput
}

type createTagPayload {
  tag: Tag
}

input createTotoInput {
  data: TotoInput
}

type createTotoPayload {
  toto: Toto
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArticleInput {
  where: InputID
}

type deleteArticlePayload {
  article: Article
}

input deleteRecipeInput {
  where: InputID
}

type deleteRecipePayload {
  recipe: Recipe
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTagInput {
  where: InputID
}

type deleteTagPayload {
  tag: Tag
}

input deleteTotoInput {
  where: InputID
}

type deleteTotoPayload {
  toto: Toto
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArticleInput {
  title: String
  content: String
  published: Boolean
  json: JSON
  number: Int
  date: DateTime
  enum: ENUM_ARTICLE_ENUM
  bool: Boolean
  pic: ID
  pictures: [ID]
  mainTag: ID
  linkedTags: [ID]
  manyTags: [ID]
  fb_cta: editGroupctafacebookInput
  mainIngredient: editGroupingredientsInput
  ingredients: [editGroupingredientsInput]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editGroupctafacebookInput {
  id: ID
  title: String
  description: String
}

input editGroupingredientsInput {
  id: ID
  name: String
  quantity: Float
  enum: ENUM_GROUPINGREDIENTS_ENUM
  pic: ID
  article: ID
  articles: [ID]
}

input editRecipeInput {
  title: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTagInput {
  name: String
  linkedArticles: [ID]
}

input editTestInput {
  type: String
}

input editTotoInput {
  name: String
  date: DateTime
  number: Int
  json: JSON
  somethin: ENUM_TOTO_SOMETHIN
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_ARTICLE_ENUM {
  morning
  noon
}

enum ENUM_GROUPINGREDIENTS_ENUM {
  morning
  noon
}

enum ENUM_TOTO_SOMETHIN {
  un
  deux
  trois
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

"""test"""
type GroupCtaFacebook {
  title: String
  description: String
  id: ID!
}

input GroupctafacebookInput {
  title: String
  description: String
}

type GroupIngredients {
  name: String!
  quantity: Float!
  enum: ENUM_GROUPINGREDIENTS_ENUM
  pic: UploadFile
  article: Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  id: ID!
}

input GroupingredientsInput {
  name: String!
  quantity: Float!
  enum: ENUM_GROUPINGREDIENTS_ENUM
  pic: ID
  article: ID
  articles: [ID]
}

input InputID {
  id: ID!
}

scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Article | createArticlePayload | updateArticlePayload | deleteArticlePayload | Recipe | createRecipePayload | updateRecipePayload | deleteRecipePayload | Tag | createTagPayload | updateTagPayload | deleteTagPayload | Toto | createTotoPayload | updateTotoPayload | deleteTotoPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | MypluginTest

type Mutation {
  createArticle(input: createArticleInput): createArticlePayload
  updateArticle(input: updateArticleInput): updateArticlePayload
  deleteArticle(input: deleteArticleInput): deleteArticlePayload
  createRecipe(input: createRecipeInput): createRecipePayload
  updateRecipe(input: updateRecipeInput): updateRecipePayload
  deleteRecipe(input: deleteRecipeInput): deleteRecipePayload
  createTag(input: createTagInput): createTagPayload
  updateTag(input: updateTagInput): updateTagPayload
  deleteTag(input: deleteTagInput): deleteTagPayload
  createToto(input: createTotoInput): createTotoPayload
  updateToto(input: updateTotoInput): updateTotoPayload
  deleteToto(input: deleteTotoInput): deleteTotoPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type MypluginTest {
  type: String!
  id: ID!
}

type Query {
  article(id: ID!): Article
  articles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  recipe(id: ID!): Recipe
  recipes(sort: String, limit: Int, start: Int, where: JSON): [Recipe]
  tag(id: ID!): Tag
  tags(sort: String, limit: Int, start: Int, where: JSON): [Tag]
  toto(id: ID!): Toto
  totos(sort: String, limit: Int, start: Int, where: JSON): [Toto]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  test(id: ID!): MypluginTest
  tests(sort: String, limit: Int, start: Int, where: JSON): [MypluginTest]
  me: UsersPermissionsMe
  userCustomRoute: String
}

type Recipe {
  title: String
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input RecipeInput {
  title: String
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type Tag {
  name: String
  linkedArticles(sort: String, limit: Int, start: Int, where: JSON): [Article]
  id: ID!
}

input TagInput {
  name: String
  linkedArticles: [ID]
}

input TestInput {
  type: String!
}

type Toto {
  name: String!
  date: DateTime!
  number: Int
  json: JSON
  somethin: ENUM_TOTO_SOMETHIN
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input TotoInput {
  name: String!
  date: DateTime!
  number: Int
  json: JSON
  somethin: ENUM_TOTO_SOMETHIN
}

input updateArticleInput {
  where: InputID
  data: editArticleInput
}

type updateArticlePayload {
  article: Article
}

input updateRecipeInput {
  where: InputID
  data: editRecipeInput
}

type updateRecipePayload {
  recipe: Recipe
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTagInput {
  where: InputID
  data: editTagInput
}

type updateTagPayload {
  tag: Tag
}

input updateTotoInput {
  where: InputID
  data: editTotoInput
}

type updateTotoPayload {
  toto: Toto
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  id: ID!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  id: ID!
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
}
