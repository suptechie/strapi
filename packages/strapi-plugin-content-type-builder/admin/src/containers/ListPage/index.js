import React from 'react';
import { useHistory } from 'react-router-dom';
import { get, has } from 'lodash';
import { ViewContainer } from 'strapi-helper-plugin';
import useDataManager from '../../hooks/useDataManager';
import LeftMenu from '../LeftMenu';

const ListPage = () => {
  const { initialData, modifiedData, isInContentTypeView } = useDataManager();
  const { push } = useHistory();
  const firstMainDataPath = isInContentTypeView ? 'contentType' : 'component';
  const mainDataTypeAttributesPath = [
    firstMainDataPath,
    'schema',
    'attributes',
  ];

  const attributes = get(modifiedData, mainDataTypeAttributesPath, {});
  const currentDataName = get(
    initialData,
    [firstMainDataPath, 'schema', 'name'],
    ''
  );
  const targetUid = get(modifiedData, [firstMainDataPath, 'uid']);

  const handleClickAddAttributeMainData = () => {
    const forTarget = isInContentTypeView ? 'contentType' : 'component';
    const search = `modalType=chooseAttribute&forTarget=${forTarget}&targetUid=${targetUid}&headerDisplayName=${currentDataName}`;
    push({ search });
  };
  const handleClickAddAttributeNestedData = (targetUid, headerDisplayName) => {
    const search = `modalType=chooseAttribute&forTarget=components&targetUid=${targetUid}&headerDisplayName=${headerDisplayName}`;
    push({ search });
  };
  // TODO just a util not sure it should be kept
  const getType = attrName => {
    const type = has(modifiedData, [
      ...mainDataTypeAttributesPath,
      attrName,
      'nature',
    ])
      ? 'relation'
      : get(
          modifiedData,
          [...mainDataTypeAttributesPath, attrName, 'type'],
          ''
        );

    return type;
  };
  const getComponentSchema = componentName => {
    return get(modifiedData, ['components', componentName], {});
  };
  const getFirstLevelComponentName = compoName => {
    return get(
      modifiedData,
      [...mainDataTypeAttributesPath, compoName, 'component'],
      ''
    );
  };
  const getComponent = attrName => {
    const componentToGet = get(
      modifiedData,
      [...mainDataTypeAttributesPath, attrName, 'component'],
      ''
    );
    const componentSchema = getComponentSchema(componentToGet);

    return componentSchema;
  };
  const handleClickEditField = (
    forTarget,
    targetUid,
    attrName,
    type,
    headerDisplayName
  ) => {
    let attributeType;

    switch (type) {
      case 'integer':
      case 'biginteger':
      case 'decimal':
      case 'float':
        attributeType = 'number';
        break;
      case 'string':
      case 'text':
        attributeType = 'text';
        break;
      case '':
        attributeType = 'relation';
        break;
      default:
        attributeType = type;
    }

    push({
      search: `modalType=attribute&actionType=edit&settingType=base&forTarget=${forTarget}&targetUid=${targetUid}&attributeName=${attrName}&attributeType=${attributeType}&headerDisplayName=${headerDisplayName}`,
    });
  };

  /*
   *
   *   MOST OF THIS CODE NEEDS TO BE TRASHED!
   *   THE ONLY THING THAT NEEDS TO BE KEPT IS THE SEARCH GENERATED BY
   *    - handleClickEditField
   *    - handleClickAddAttributeMainData
   *    - handleClickAddAttributeNestedData
   */

  return (
    <ViewContainer>
      <div className="container-fluid">
        <div className="row">
          <LeftMenu />
          <div className="col-md-9">
            <button type="button" onClick={handleClickAddAttributeMainData}>
              Add field
            </button>

            {/* REALLY TEMPORARY SINCE IT DOESN T SUPPORT ANY NESTING COMPONENT*/}
            <ul>
              {Object.keys(attributes).map(attr => {
                const type = getType(attr);

                if (type === 'component') {
                  const compoData = getComponent(attr);
                  const componentSchema = get(
                    compoData,
                    ['schema', 'attributes'],
                    {}
                  );

                  return (
                    <li key={attr}>
                      <span>{attr}</span>
                      &nbsp:
                      <span>component</span>
                      <ul>
                        {Object.keys(componentSchema).map(componentAttr => {
                          // Type of the component's attribute
                          const componentAttrType = get(
                            componentSchema,
                            [componentAttr, 'type'],
                            ''
                          );

                          if (componentAttrType === 'component') {
                            const nestedCompoNameUid = get(
                              componentSchema,
                              [componentAttr, 'component'],
                              'not found'
                            );
                            const nestedCompoData = getComponentSchema(
                              nestedCompoNameUid
                            );
                            const nestedCompoAttributes = get(
                              nestedCompoData,
                              ['schema', 'attributes'],
                              {}
                            );

                            return (
                              <li key={`${attr}.${componentAttr}`}>
                                <span>{componentAttr}</span>
                                &nbsp;
                                <span>{componentAttrType}</span>
                                <ul>
                                  {Object.keys(nestedCompoAttributes).map(
                                    nestedCompoAttribute => {
                                      const nestedComponentAttrType = get(
                                        nestedCompoAttributes,
                                        [nestedCompoAttribute, 'type'],
                                        ''
                                      );
                                      return (
                                        <li
                                          key={`${attr}.${componentAttr}.${nestedCompoAttribute}`}
                                          onClick={() =>
                                            handleClickEditField(
                                              'components',
                                              nestedCompoNameUid,
                                              nestedCompoAttribute,
                                              nestedComponentAttrType,
                                              nestedCompoNameUid
                                            )
                                          }
                                        >
                                          <span>{nestedCompoAttribute}</span>
                                          &nbsp;
                                          <span>{nestedComponentAttrType}</span>
                                        </li>
                                      );
                                    }
                                  )}
                                  <button
                                    type="button"
                                    onClick={() => {
                                      console.log('ooo', componentAttr);
                                      handleClickAddAttributeNestedData(
                                        nestedCompoNameUid,
                                        componentAttr
                                      );
                                    }}
                                  >
                                    Add field to nested compo
                                  </button>
                                </ul>
                              </li>
                            );
                          }

                          return (
                            <li
                              key={`${attr}.${componentAttr}`}
                              onClick={() =>
                                handleClickEditField(
                                  'components',
                                  getFirstLevelComponentName(attr),
                                  componentAttr,
                                  componentAttrType,
                                  attr
                                )
                              }
                            >
                              <span>{componentAttr}</span>
                              &nbsp;
                              <span>{componentAttrType}</span>
                            </li>
                          );
                        })}
                        <button
                          type="button"
                          onClick={() =>
                            handleClickAddAttributeNestedData(
                              get(compoData, 'uid', ''),
                              get(compoData, 'schema.name', 'ERROR')
                            )
                          }
                        >
                          Add field to compo
                        </button>
                      </ul>
                    </li>
                  );
                }

                return (
                  <li
                    key={attr}
                    onClick={() =>
                      handleClickEditField(
                        isInContentTypeView ? 'contentType' : 'component',
                        targetUid,
                        attr,
                        type,
                        currentDataName
                      )
                    }
                  >
                    <span>{attr}</span>
                    &nbsp;
                    <span>{type}</span>
                  </li>
                );
              })}
            </ul>
          </div>
        </div>
      </div>
    </ViewContainer>
  );
};

export default ListPage;
